BattingPost2[is.na(BattingPost2)] = 0
## Combining all player batting stats into seasons
BattingPost3 <- aggregate(. ~ playerID + yearID, data = BattingPost2, sum)
## Creating on base average (OBA)
BattingPost3 <- BattingPost3 %>% mutate(OBA = ((H + BB + HBP)/(AB+ BB + HBP)))
## Creating extra base hits (XBH)
BattingPost3 <- BattingPost3 %>% mutate(XBH = (`2B` + `3B` + HR))
## Creating Slugging (SLG)
BattingPost3 <- BattingPost3 %>% mutate(SLG = (((H-XBH)+(2*`2B`)+(3*`3B`)+(4*HR))/(AB)))
## Creating On Base Plus Slugging (OPS)
BattingPost3 <- BattingPost3 %>% mutate(OPS = (OBA + SLG))
## Creating on singles stat
BattingPost3 <- BattingPost3 %>% mutate(`1B` = (H-XBH))
## Creating on singles stat
BattingPost3 <- BattingPost3 %>% mutate(BO = (AB - H))
rmse <- function(error)
{
sqrt(mean(error^2))
}
RSQUARE <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
##WAR vs. Salary
WAR_Salary <- left_join(Player_WAR, Salaries,by = c("playerID", "yearID"))
WAR_Salary <- WAR_Salary %>% rename(G = G.x)
WAR_Salary2 <- na.omit(WAR_Salary)
WAR_Salary2 <- WAR_Salary2 %>% subset(select = -c(playerID, yearID))
WAR_Salary2 <- WAR_Salary2 %>% filter(AB > 100)
WAR_Salary2 <- WAR_Salary2 %>% filter(G > 20)
ggplot(data = WAR_Salary2, mapping = aes(x = AB, y = R, color = wOBA)) + geom_point() + geom_smooth(color = "red")
ggplot(data = WAR_Salary2, mapping = aes(x = H, y = R, color = wOBA)) + geom_point() + geom_smooth(color = "red")
R.ts <- WAR_Salary2$R %>% createDataPartition(p = .8, list = FALSE)
R.train <- WAR_Salary2[R.ts,]
R.test <- WAR_Salary2[-R.ts,]
modelMLRR <- lm(R ~ `1B` + `2B` + `3B` + HR + BB + HBP + SB + CS ,data = R.train)
vif(modelMLRR)
summary(modelMLRR)
predictedR <- predict(modelMLRR, R.train)
RMSE(predictedR, R.train$R)
R2(predictedR, R.train$R)
modelSVRR <- svm(R ~ `1B` + `2B` + `3B` + HR + BB + HBP + SB + CS , data = R.train)
predictedR2 <- predict(modelSVRR, R.train)
RMSE(predictedR2, R.train$R)
R2(predictedR2, R.train$R)
fitR <- rpart( R ~ `1B` + `2B` + `3B` + HR + BB + HBP + SB + CS, data = R.train, method = "anova")
plot(fitR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(fitR)
predictedR3 <- predict(fitR, R.train, method = "anova")
RMSE(predictedR3, R.train$R)
R2(predictedR3, R.train$R)
predictedR4 <- predict(modelMLRR, R.test)
RMSE(R.test$R,predictedR4)
R2(R.test$R,predictedR4)
predictedR5 <- predict(modelSVRR, R.test)
RMSE(predictedR5, R.test$R)
R2(predictedR5, R.test$R)
predictedR6 <- predict(fitR, R.test, method = "anova")
RMSE(predictedR6, R.test$R)
R2(predictedR6, R.test$R)
ggplot(data = WAR_Salary, mapping = aes(x = salary, y = WAR, color = AB)) + geom_point() + geom_smooth()
WAR_Salary2 <- na.omit(WAR_Salary)
WAR_Salary2 <- WAR_Salary2 %>% subset(select = -c(playerID, yearID))
WAR_Salary2 <- WAR_Salary2 %>% filter(AB > 100)
WAR_Salary2 <- WAR_Salary2 %>% filter(G > 20)
set.seed(123)
training.samples <- WAR_Salary2$WAR %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- WAR_Salary2[training.samples, ]
test.data <- WAR_Salary2[-training.samples, ]
model1b <- lm(WAR ~ SB + CS + SO + IBB + HBP + SH + PB + FP + H, data = train.data)
summary(model1b)
##train Data
predictedR <- predict(model1b, train.data)
RMSE(predictedR, train.data$WAR)
R2(predictedR, train.data$WAR)
##test Data
predictedR <- predict(model1b, test.data)
RMSE(predictedR, test.data$WAR)
R2(predictedR, test.data$WAR)
model_1_SVR <- svm(WAR ~ SB + CS + SO + IBB + HBP + SH + PB + FP + H, data = train.data)
##Train Data
predicted.classes <- predict(model_1_SVR, train.data)
RMSE(predicted.classes, train.data$WAR)
R2(predicted.classes, train.data$WAR)
##Test Data
predicted.classes <- predict(model_1_SVR, test.data)
RMSE(predicted.classes, test.data$WAR)
R2(predicted.classes, test.data$WAR)
DT_1_WAR <- rpart(WAR ~ SB + CS + SO + IBB + HBP + SH + PB + FP + H, data = train.data, method = "anova")
plot(DT_1_WAR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(DT_1_WAR)
##train
predictedR3 <- predict(DT_1_WAR, train.data, method = "anova")
RMSE(predictedR3, train.data$WAR)
R2(predictedR3, train.data$WAR)
##test
predictedR3 <- predict(DT_1_WAR, test.data, method = "anova")
RMSE(predictedR3, test.data$WAR)
R2(predictedR3, test.data$WAR)
## removing all unnecessary columns in master
master1 <- Master %>%  subset(select = c("playerID", "birthYear", "birthCountry", "birthState", "birthCity", "nameFirst", "nameLast", "nameGiven"))
## adding the contents of master to the pitching stats and calculating the age for every player for every year
pitcher_stats_complete_AGE <- left_join(pitcher_stats_complete, master1, by = c("playerID"))
pitcher_stats_complete_AGE <- pitcher_stats_complete_AGE %>% mutate(age = yearID-birthYear)
## adding the contents of master to the player war and calculating the age for every player for every year
Player_WAR_AGE <- left_join(Player_WAR, master1, by = c("playerID"))
Player_WAR_AGE <- Player_WAR_AGE %>% mutate(age = yearID-birthYear)
ggplot(data = Player_WAR_AGE) + geom_smooth(mapping = aes(x = age, y = WAR))
Player_WAR_AGE <- na.omit(Player_WAR_AGE)
set.seed(123)
training.samples <- Player_WAR_AGE$WAR %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Player_WAR_AGE[training.samples, ]
test.data <- Player_WAR_AGE[-training.samples, ]
MLR_5_WAR <- lm(WAR ~ H + SB + CS + SH + SLG + PB + age , data = train.data)
summary(MLR_5_WAR)
##train Data
predictedR <- predict(model1b, train.data)
RMSE(predictedR, train.data$WAR)
R2(predictedR, train.data$WAR)
##test Data
predictedR <- predict(model1b, test.data)
RMSE(predictedR, test.data$WAR)
R2(predictedR, test.data$WAR)
SVR_5_WAR <- svm(WAR ~ H + SB + CS + SH + SLG + PB + age , data = train.data)
##Train Data
predicted.classes <- predict(SVR_5_WAR, train.data)
RMSE(predicted.classes, train.data$WAR)
R2(predicted.classes, train.data$WAR)
##Test Data
predicted.classes <- predict(SVR_5_WAR, test.data)
RMSE(predicted.classes, test.data$WAR)
R2(predicted.classes, test.data$WAR)
DT_5_WAR <- rpart(WAR ~ H + SB + CS + SH + SLG + PB + age, data = train.data, method = "anova")
plot(DT_5_WAR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(DT_5_WAR)
##train
predictedR3 <- predict(DT_5_WAR, train.data, method = "anova")
RMSE(predictedR3, train.data$WAR)
R2(predictedR3, train.data$WAR)
##test
predictedR3 <- predict(DT_1_WAR, test.data, method = "anova")
RMSE(predictedR3, test.data$WAR)
R2(predictedR3, test.data$WAR)
knitr::opts_chunk$set(echo = TRUE)
library(ggbeeswarm)
library(ggforce)
library(readr)
library(tidyverse)
library(dplyr)
library(caret)
library(rpart)
library(car)
library(e1071)
library(kernlab)
library(randomForest)
library(sjmisc)
library(lme4)
library(ModelMetrics)
library(knitr)
AwardsPlayers <- read_csv("AwardsPlayers.csv")
Batting <- read_csv("Batting.csv")
BattingPost <- read_csv("BattingPost.csv")
Fielding <- read_csv("Fielding.csv")
Master <- read_csv("Master.csv")
Pitching <- read_csv("Pitching.csv")
PitchingPost <- read_csv("PitchingPost.csv")
Salaries <- read_csv("Salaries.csv")
##Filtering dataframes to only include data between 1995-2015
AwardsPlayers <- AwardsPlayers %>% filter(yearID >= 1995)
Batting <- Batting %>% filter(yearID >= 1995)
BattingPost <- BattingPost %>% filter(yearID >= 1995)
Fielding <- Fielding %>% filter(yearID >= 1995)
Pitching <- Pitching %>% filter(yearID >= 1995)
PitchingPost <- PitchingPost %>% filter(yearID >= 1995)
Master <- Master %>% filter(finalGame >= as.Date("1995-04-25"))
Salaries <- Salaries %>% filter(yearID >= 1995)
## Transforming Batting Statistics
## removing undesirable variable
Batting2 <- Batting %>% subset(select = -c(teamID, lgID, SF, GIDP, stint))
## na is equivalent to 0
Batting2[is.na(Batting2)] = 0
## Combining all player batting stats into seasons
Batting3 <- aggregate(. ~ playerID + yearID, data = Batting2, sum)
## Creating on base average (OBA) higher indicates better players
Batting3 <- Batting3 %>% mutate(OBA = ((H + BB + HBP)/(AB+ BB + HBP)))
## Creating extra base hits (XBH)
Batting3 <- Batting3 %>% mutate(XBH = (`2B` + `3B` + HR))
## Creating Slugging (SLG) higher indicates better players
Batting3 <- Batting3 %>% mutate(SLG = (((H-XBH)+(2*`2B`)+(3*`3B`)+(4*HR))/(AB)))
## Creating On Base Plus Slugging (OPS) higher indicates better players
Batting3 <- Batting3 %>% mutate(OPS = (OBA + SLG))
## Creating on base average Stolen Base Percentage (SBP) higher indicates better players
Batting3 <- Batting3 %>% mutate(SBP = ((SB)/(SB + CS)))
## Creating on singles stat
Batting3 <- Batting3 %>% mutate(`1B` = (H-XBH))
## Creating on singles stat
Batting3 <- Batting3 %>% mutate(BO = (AB - H))
## Creating BA
Batting3 <- Batting3 %>% mutate(BA = (AB/H))
## Creating wOBA
Batting3 <- Batting3 %>% mutate(wOBA = (.69*(BB) +.72*(HBP) +.89*(H - XBH) + 1.27*(`2B`) + 1.62*(`3B`) + HR*2.10) / (AB + BB - IBB + SH +HBP))
##Transforming fielding statistics
## removing undesirable variables
SFielding2 <- Fielding %>% subset(select = -c(teamID, lgID,InnOuts, WP, SB, CS, ZR, GS, stint))
## removing pitchers from fielding
SFielding2 <- SFielding2 %>% filter(POS != "P")
## removing position
SFielding2 <- SFielding2 %>% subset(select = -c(POS))
## na is equivalent to 0
SFielding2[is.na(SFielding2)] = 0
## Combining all player fielding stats into seasons
SFielding3 <- aggregate(. ~  playerID + yearID, data = SFielding2, sum)
## Combines the data frames batting and fielding together contain only position player observations
## creating Fielding Percentage(FP)
SFielding3 <- SFielding3 %>% mutate(FP = ((PO + A)/(PO + A + E)))
## removing non numeric variables in pitching
pitching2 <- Pitching %>% subset(select = -c(teamID, lgID, IBB, SH, SF, GIDP, ERA))
## combining all the stats from the different stints of the pitchers
pitching2 <- aggregate(. ~ playerID + yearID, data = pitching2, sum)
##Creating a combined ERA
pitching2 <- pitching2 %>% mutate(ERA = ((ER *9)/(IPouts/3)))
## removing the stint column
pitching2 <- pitching2 %>% subset(select = -c(stint))
## removing non numeric variables in fielding
fielding2 <- Fielding %>% subset(select = -c(teamID, lgID, GS, InnOuts,PB, WP, SB, CS, ZR))
## filtering out all non pitchers
fielding2 <- fielding2 %>% filter(POS == "P")
## removing the position column
fielding2 <- fielding2 %>% subset(select = -c(POS))
## combining all the stats from the different stints of the pitchers
fielding2 <- aggregate(. ~ playerID + yearID, data = fielding2, sum)
## removing the stint column
fielding2 <- fielding2 %>% subset(select = -c(stint))
## complete data frame containing all statistics recorded for pitchers
pitcher_stats <- left_join(fielding2, pitching2, by = c("playerID", "yearID"))
## removing the playerID column
pitcher_stats2 <- pitcher_stats %>% subset(select = -c(playerID))
## combining everything by year and averaging all the states league wide
pitcher_stats2 <- aggregate(. ~ yearID, data = pitcher_stats2, mean)
## removing the all non important columns
pitcher_stats3 <- pitcher_stats2 %>% subset(select = c(yearID, ERA, HR, BB, HBP, SO, IPouts))
## converting IPouts to IP
pitcher_stats3$IPouts <- pitcher_stats3$IPouts/3
##renaming all the columns
pitcher_stats3 <- pitcher_stats3 %>% rename(lgERA = ERA, lgHR = HR, lgBB = BB, lgHBP = HBP, lgSO = SO, lgIP = IPouts)
##calculating the FIP constant
pitcher_stats3 <- pitcher_stats3 %>% mutate(FIPconstant =  lgERA - (((13*lgHR)+(3*(lgBB+lgHBP))-(2*lgSO))/lgIP))
## create new dataframe with all the league avg states and the FIP constant per year
pitcher_stats_complete <- left_join(pitcher_stats, pitcher_stats3, by = c("yearID"))
## removing G.y and renaming G.x
pitcher_stats_complete <- pitcher_stats_complete %>% subset(select = -c(G.y))
pitcher_stats_complete <- pitcher_stats_complete %>% rename(G = G.x)
## converting and renaming IPouts to IP
pitcher_stats_complete$IPouts <- pitcher_stats_complete$IPouts/3
pitcher_stats_complete <- pitcher_stats_complete %>% rename(IP = IPouts)
## calculating the FIP for every player
pitcher_stats_complete <- pitcher_stats_complete %>% mutate(FIP = ((13*HR)+(3*(BB+HBP))-(2*SO))/IP + FIPconstant)
##filtering out pitchers with low playing time
pitcher_stats_complete <- pitcher_stats_complete %>% filter(IP >= 20)
##filtering out infinites
pitcher_stats_complete <- pitcher_stats_complete %>% filter(is.finite(FIP))
## Contains both fielding and batting statistics for each player by season
Player_WAR <- full_join(Batting3, SFielding3, by = c("playerID", "yearID"))
## Removing undesirable variables
##Player_WAR <- Player_WAR %>% subset(select = c(playerID, yearID, OPS, SBP, FP, G.x))
## Calculating the means
OPSmean <- mean(Player_WAR$OPS, na.rm ="TRUE")
SBPmean <- mean(Player_WAR$SBP, na.rm = "TRUE")
FPmean <- mean(Player_WAR$FP, na.rm = "TRUE")
## Creating a statistic that determines value of player based on fielding, batting, and base running
Player_WAR <- Player_WAR %>% mutate(WAR = ((OPS/OPSmean)+(SBP/SBPmean)+(FP/FPmean)))
##Comparing Regular VS Postseason OPS
## removing undesirable variable
BattingPost2 <- BattingPost %>% subset(select = -c(teamID, lgID, SF, GIDP, round))
## na is equivalent to 0
BattingPost2[is.na(BattingPost2)] = 0
## Combining all player batting stats into seasons
BattingPost3 <- aggregate(. ~ playerID + yearID, data = BattingPost2, sum)
## Creating on base average (OBA)
BattingPost3 <- BattingPost3 %>% mutate(OBA = ((H + BB + HBP)/(AB+ BB + HBP)))
## Creating extra base hits (XBH)
BattingPost3 <- BattingPost3 %>% mutate(XBH = (`2B` + `3B` + HR))
## Creating Slugging (SLG)
BattingPost3 <- BattingPost3 %>% mutate(SLG = (((H-XBH)+(2*`2B`)+(3*`3B`)+(4*HR))/(AB)))
## Creating On Base Plus Slugging (OPS)
BattingPost3 <- BattingPost3 %>% mutate(OPS = (OBA + SLG))
## Creating on singles stat
BattingPost3 <- BattingPost3 %>% mutate(`1B` = (H-XBH))
## Creating on singles stat
BattingPost3 <- BattingPost3 %>% mutate(BO = (AB - H))
rmse <- function(error)
{
sqrt(mean(error^2))
}
RSQUARE <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
##WAR vs. Salary
WAR_Salary <- left_join(Player_WAR, Salaries,by = c("playerID", "yearID"))
WAR_Salary <- WAR_Salary %>% rename(G = G.x)
WAR_Salary2 <- na.omit(WAR_Salary)
WAR_Salary2 <- WAR_Salary2 %>% subset(select = -c(playerID, yearID))
WAR_Salary2 <- WAR_Salary2 %>% filter(AB > 100)
WAR_Salary2 <- WAR_Salary2 %>% filter(G > 20)
ggplot(data = WAR_Salary2, mapping = aes(x = AB, y = R, color = wOBA)) + geom_point() + geom_smooth(color = "red")
ggplot(data = WAR_Salary2, mapping = aes(x = H, y = R, color = wOBA)) + geom_point() + geom_smooth(color = "red")
R.ts <- WAR_Salary2$R %>% createDataPartition(p = .8, list = FALSE)
R.train <- WAR_Salary2[R.ts,]
R.test <- WAR_Salary2[-R.ts,]
modelMLRR <- lm(R ~ `1B` + `2B` + `3B` + HR + BB + HBP + SB + CS ,data = R.train)
vif(modelMLRR)
summary(modelMLRR)
predictedR <- predict(modelMLRR, R.train)
RMSE(predictedR, R.train$R)
R2(predictedR, R.train$R)
modelSVRR <- svm(R ~ `1B` + `2B` + `3B` + HR + BB + HBP + SB + CS , data = R.train)
predictedR2 <- predict(modelSVRR, R.train)
RMSE(predictedR2, R.train$R)
R2(predictedR2, R.train$R)
fitR <- rpart( R ~ `1B` + `2B` + `3B` + HR + BB + HBP + SB + CS, data = R.train, method = "anova")
plot(fitR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(fitR)
predictedR3 <- predict(fitR, R.train, method = "anova")
RMSE(predictedR3, R.train$R)
R2(predictedR3, R.train$R)
predictedR4 <- predict(modelMLRR, R.test)
RMSE(R.test$R,predictedR4)
R2(R.test$R,predictedR4)
predictedR5 <- predict(modelSVRR, R.test)
RMSE(predictedR5, R.test$R)
R2(predictedR5, R.test$R)
predictedR6 <- predict(fitR, R.test, method = "anova")
RMSE(predictedR6, R.test$R)
R2(predictedR6, R.test$R)
ggplot(data = WAR_Salary, mapping = aes(x = salary, y = WAR, color = AB)) + geom_point() + geom_smooth()
WAR_Salary2 <- na.omit(WAR_Salary)
WAR_Salary2 <- WAR_Salary2 %>% subset(select = -c(playerID, yearID))
WAR_Salary2 <- WAR_Salary2 %>% filter(AB > 100)
WAR_Salary2 <- WAR_Salary2 %>% filter(G > 20)
set.seed(123)
training.samples <- WAR_Salary2$WAR %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- WAR_Salary2[training.samples, ]
test.data <- WAR_Salary2[-training.samples, ]
model1b <- lm(WAR ~ SB + CS + SO + IBB + HBP + SH + PB + FP + H, data = train.data)
summary(model1b)
##train Data
predictedR <- predict(model1b, train.data)
RMSE(predictedR, train.data$WAR)
R2(predictedR, train.data$WAR)
##test Data
predictedR <- predict(model1b, test.data)
RMSE(predictedR, test.data$WAR)
R2(predictedR, test.data$WAR)
model_1_SVR <- svm(WAR ~ SB + CS + SO + IBB + HBP + SH + PB + FP + H, data = train.data)
##Train Data
predicted.classes <- predict(model_1_SVR, train.data)
RMSE(predicted.classes, train.data$WAR)
R2(predicted.classes, train.data$WAR)
##Test Data
predicted.classes <- predict(model_1_SVR, test.data)
RMSE(predicted.classes, test.data$WAR)
R2(predicted.classes, test.data$WAR)
DT_1_WAR <- rpart(WAR ~ SB + CS + SO + IBB + HBP + SH + PB + FP + H, data = train.data, method = "anova")
plot(DT_1_WAR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(DT_1_WAR)
##train
predictedR3 <- predict(DT_1_WAR, train.data, method = "anova")
RMSE(predictedR3, train.data$WAR)
R2(predictedR3, train.data$WAR)
##test
predictedR3 <- predict(DT_1_WAR, test.data, method = "anova")
RMSE(predictedR3, test.data$WAR)
R2(predictedR3, test.data$WAR)
## removing all unnecessary columns in master
master1 <- Master %>%  subset(select = c("playerID", "birthYear", "birthCountry", "birthState", "birthCity", "nameFirst", "nameLast", "nameGiven"))
## adding the contents of master to the pitching stats and calculating the age for every player for every year
pitcher_stats_complete_AGE <- left_join(pitcher_stats_complete, master1, by = c("playerID"))
pitcher_stats_complete_AGE <- pitcher_stats_complete_AGE %>% mutate(age = yearID-birthYear)
## adding the contents of master to the player war and calculating the age for every player for every year
Player_WAR_AGE <- left_join(Player_WAR, master1, by = c("playerID"))
Player_WAR_AGE <- Player_WAR_AGE %>% mutate(age = yearID-birthYear)
ggplot(data = Player_WAR_AGE) + geom_smooth(mapping = aes(x = age, y = WAR))
Player_WAR_AGE <- na.omit(Player_WAR_AGE)
set.seed(123)
training.samples <- Player_WAR_AGE$WAR %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- Player_WAR_AGE[training.samples, ]
test.data <- Player_WAR_AGE[-training.samples, ]
MLR_5_WAR <- lm(WAR ~ H + SB + CS + SH + SLG + PB + age , data = train.data)
summary(MLR_5_WAR)
##train Data
predictedR <- predict(model1b, train.data)
RMSE(predictedR, train.data$WAR)
R2(predictedR, train.data$WAR)
##test Data
predictedR <- predict(model1b, test.data)
RMSE(predictedR, test.data$WAR)
R2(predictedR, test.data$WAR)
SVR_5_WAR <- svm(WAR ~ H + SB + CS + SH + SLG + PB + age , data = train.data)
##Train Data
predicted.classes <- predict(SVR_5_WAR, train.data)
RMSE(predicted.classes, train.data$WAR)
R2(predicted.classes, train.data$WAR)
##Test Data
predicted.classes <- predict(SVR_5_WAR, test.data)
RMSE(predicted.classes, test.data$WAR)
R2(predicted.classes, test.data$WAR)
DT_5_WAR <- rpart(WAR ~ H + SB + CS + SH + SLG + PB + age, data = train.data, method = "anova")
plot(DT_5_WAR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(DT_5_WAR)
##train
predictedR3 <- predict(DT_5_WAR, train.data, method = "anova")
RMSE(predictedR3, train.data$WAR)
R2(predictedR3, train.data$WAR)
##test
predictedR3 <- predict(DT_1_WAR, test.data, method = "anova")
RMSE(predictedR3, test.data$WAR)
R2(predictedR3, test.data$WAR)
stateavgFIP <- pitcher_stats_complete_AGE %>% subset(select = c(birthCountry, birthState, FIP))
stateavgWAR <- Player_WAR_AGE %>% subset(select = c(birthCountry, birthState, WAR))
stateavgFIP <- stateavgFIP %>% filter(birthCountry == "USA")
stateavgWAR <- stateavgWAR %>% filter(birthCountry == "USA")
stateavgFIP <- stateavgFIP %>% subset(select = -c(birthCountry))
stateavgWAR <- stateavgWAR %>% subset(select = -c(birthCountry))
stateavgFIP <- stateavgFIP %>% filter(is.finite(FIP))
stateavgWAR <- stateavgWAR %>% filter(is.finite(WAR))
stateavgFIP <- aggregate(. ~ birthState, data = stateavgFIP, mean)
stateavgWAR <- aggregate(. ~ birthState, data = stateavgWAR, mean)
stateFIP <- pitcher_stats_complete_AGE
stateWAR <- Player_WAR_AGE
stateFIP <- stateFIP %>% filter(birthCountry == "USA")
stateWAR <- stateWAR %>% filter(birthCountry == "USA")
stateFIP$birthState <- as.factor(stateFIP$birthState)
stateWAR$birthState <- as.factor(stateWAR$birthState)
stateFIP <- na.omit(stateFIP)
stateWAR <- na.omit(stateWAR)
ggplot(data=stateavgWAR, aes(x=birthState, y=WAR)) + geom_bar(stat="identity", color="blue", fill="white")
set.seed(123)
training.samples <- stateWAR$WAR %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- stateWAR[training.samples, ]
test.data <- stateWAR[-training.samples, ]
MVR_6_WAR <- lm(WAR ~ AB + R + SB + CS + SH + OBA + SLG + birthState, data = train.data)
summary(MVR_6_WAR)
##train Data
predictedR <- predict(MVR_6_WAR, train.data)
RMSE(predictedR, train.data$WAR)
R2(predictedR, train.data$WAR)
##test Data
predictedR <- predict(MVR_6_WAR, test.data)
RMSE(predictedR, test.data$WAR)
R2(predictedR, test.data$WAR)
SVR_6_WAR <- svm(WAR ~ AB + R + SB + CS + SH + OBA + SLG + birthState, data = train.data)
##Train Data
predicted.classes <- predict(SVR_6_WAR, train.data)
RMSE(predicted.classes, train.data$WAR)
R2(predicted.classes, train.data$WAR)
##Test Data
predicted.classes <- predict(SVR_6_WAR, test.data)
RMSE(predicted.classes, test.data$WAR)
R2(predicted.classes, test.data$WAR)
DT_6_WAR <- rpart(WAR ~ AB + R + SB + CS + SH + OBA + SLG + birthState, data = train.data, method = "anova")
plot(DT_6_WAR, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(DT_6_WAR)
##train
predictedR3 <- predict(DT_6_WAR, train.data, method = "anova")
RMSE(predictedR3, train.data$WAR)
R2(predictedR3, train.data$WAR)
##test
predictedR3 <- predict(DT_6_WAR, test.data, method = "anova")
RMSE(predictedR3, test.data$WAR)
R2(predictedR3, test.data$WAR)
FIP_Salary <- left_join(pitcher_stats_complete, Salaries,by = c("playerID", "yearID"))
##Adding age
##filtering out small sample sizes (games)
FIP_Salary <- FIP_Salary %>% filter(IP > 30)
##filtering out outliers(WAR)
FIP_Salary <- FIP_Salary %>% filter(FIP < 9)
##Visualization
ggplot(data = FIP_Salary, mapping = aes(x = salary, y = FIP, color = IP)) + geom_point() +geom_smooth()
FIP_Salary2 <- FIP_Salary %>% subset(select = -c(playerID, yearID, teamID, lgID))
set.seed(123)
training.samples <- FIP_Salary2$FIP %>% createDataPartition(p = 0.8, list = FALSE)
train.data <- FIP_Salary2[training.samples, ]
test.data <- FIP_Salary2[-training.samples, ]
model1c <- lm(FIP ~ PO + E + DP + W + L + CG + HR + BB + BAOpp + WP + HBP + ERA, data = train.data)
summary(model1c)
##train Data
predictedR <- predict(model1c, train.data)
RMSE(predictedR, train.data$FIP)
R2(predictedR, train.data$FIP)
##test Data
predictedR <- predict(model1c, test.data)
RMSE(predictedR, test.data$FIP)
R2(predictedR, test.data$FIP)
DT_1_FIP <- rpart(FIP ~ PO + E + DP + W + L + CG + HR + BB + BAOpp + WP + HBP + ERA, data = train.data, method = "anova")
plot(DT_1_FIP, uniform = TRUE,
main = "Runs Decision Tree using Regression")
summary(DT_1_FIP)
##Train Data
predictedR3 <- predict(DT_1_FIP, train.data, method = "anova")
RMSE(predictedR3, train.data$FIP)
R2(predictedR3, train.data$FIP)
##Test Data
predictedR <- predict(DT_1_FIP, data = train.data, method = "anova")
RMSE(predictedR, train.data$FIP)
R2(predictedR, train.data$FIP)
ggplot(data = pitcher_stats_complete_AGE) + geom_smooth(mapping = aes(x = age, y = FIP))
